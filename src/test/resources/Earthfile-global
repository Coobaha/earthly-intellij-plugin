ARG PROTOC_VERSION = 3.15.8

FROM ubuntu:22.04
RUN apt-get update && apt-get install -y wget unzip
RUN wget -O protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/protoc-$PROTOC_VERSION-linux-x86_64.zip
RUN unzip protoc.zip -d /usr/local/

###### Global

publish-build:
  ENV DEBIAN_FRONTEND=noninteractive
  BUILD +publish-java

publish-release:
  ENV DEBIAN_FRONTEND=noninteractive
  ARG version
  BUILD --build-arg version=$version +publish-release-java
  BUILD --build-arg version=$version +publish-release-grpc-web
  BUILD --build-arg version=$version +publish-release-python

release:
  FROM +publish-release
  ARG version
  RUN apt-get install -y git
  WORKDIR /tmp
  COPY +build-release-java/java /api/java
  COPY +build-release-python/python /api/python
  RUN --secret ghuser=+secrets/ghuser --secret ghtoken=+secrets/ghtoken git clone https://$ghuser:$ghtoken@github.com/foo/api.git;
  RUN cp -rf /api/java/* api/java/
  RUN cp -rf /api/python/* api/python/
  RUN cd api; git config user.name "foo CI/CD"; git config user.email "dev@foo.io"
  RUN cd api; git checkout -b release/$version; git add *; git commit -m "release $version"; git push --set-upstream origin release/$version; git tag v$version; git push origin v$version; git push origin --delete release/$version

###### gRPC-web

setup-grpc-web:
  ENV DEBIAN_FRONTEND=noninteractive
  RUN apt-get install -y nodejs npm
  RUN wget https://github.com/grpc/grpc-web/releases/download/$PROTOC_GEN_GRPC_WEB_VERSION/protoc-gen-grpc-web-$PROTOC_GEN_GRPC_WEB_VERSION-linux-x86_64 -O /tmp/protoc-gen-grpc-web
  RUN mv /tmp/protoc-gen-grpc-web /usr/local/bin/protoc-gen-grpc-web
  RUN chmod +x /usr/local/bin/protoc-gen-grpc-web
  RUN npm install -g typescript
  RUN npm set registry "https://npm.pkg.github.com"
  RUN --secret ghtoken=+secrets/ghtoken npm set //npm.pkg.github.com/:_authToken $ghtoken

build-release-grpc-web:
  FROM +setup-grpc-web
  ARG version
  COPY grpc-web /api/grpc-web
  COPY protobuf /api/protobuf
  WORKDIR /api/grpc-web
  RUN mkdir dist
  RUN protoc --proto_path=/api/protobuf -I=. /api/protobuf/*.proto --js_out=import_style=commonjs:dist --grpc-web_out=import_style=commonjs+dts,mode=grpcwebtext:dist && ls -la dist
  RUN sed -i -e 's/0.0.1/'$version'/g' ./package.json
  RUN cp ./*.ts dist/
  RUN npm run build
# RUN rm -rf dist/Factory.ts dist/index.ts
  RUN cp ./package.json dist/package.json
  SAVE ARTIFACT /api/grpc-web/dist AS LOCAL ./build/dist/grpc-web

publish-release-grpc-web:
  FROM +build-release-grpc-web
  RUN cd dist && npm publish --verbose

###### Java

prepare-java:
  ENV DEBIAN_FRONTEND=noninteractive
  RUN apt-get install -y default-jre maven
  COPY java /api/java
  COPY protobuf /api/protobuf
  WORKDIR /api/java

build-java:
  FROM +prepare-java
  RUN --mount=type=cache,target=/root/.m2/repository mvn clean install
  SAVE ARTIFACT /api/java/commons/target/*.jar AS LOCAL ./build/dist/java/
  SAVE ARTIFACT /api/java/proto/target/*.jar AS LOCAL ./build/dist/java/
  SAVE ARTIFACT /api/java/client/target/*.jar AS LOCAL ./build/dist/java/

publish-java:
  FROM +build-java
  ARG github_user
  ARG github_token
  COPY java/.settings.xml /root/.m2/settings.xml
  RUN --secret ghuser=+secrets/ghuser --secret "ghtoken=+secrets/ghtoken" \
  --mount=type=cache,target=/root/.m2/repository GITHUB_ACTOR=$ghuser GITHUB_TOKEN=$ghtoken mvn clean deploy

build-release-java:
  FROM +prepare-java
  ARG version
  RUN --mount=type=cache,target=/root/.m2/repository mvn -B release:prepare-with-pom -DdryRun=true -DreleaseVersion=$version
  RUN cd /api/java; mv pom.xml.tag _pom.xml; rm release* pom.*; mv _pom.xml pom.xml
  RUN cd /api/java/client; mv pom.xml.tag _pom.xml; rm release* rm pom.*; mv _pom.xml pom.xml
  RUN cd /api/java/commons; mv pom.xml.tag _pom.xml; rm release* rm pom.*; mv _pom.xml pom.xml
  RUN cd /api/java/proto; mv pom.xml.tag _pom.xml; rm release* rm pom.*; mv _pom.xml pom.xml
  RUN --mount=type=cache,target=/root/.m2/repository mvn clean install
  SAVE ARTIFACT /api/java/commons/target/*.jar AS LOCAL ./build/dist/java/
  SAVE ARTIFACT /api/java/proto/target/*.jar AS LOCAL ./build/dist/java/
  SAVE ARTIFACT /api/java/client/target/*.jar AS LOCAL ./build/dist/java/
  SAVE ARTIFACT /api/java

publish-release-java:
  FROM +build-release-java
  ARG github_user
  ARG github_token
  COPY java/.settings.xml /root/.m2/settings.xml
  RUN --secret ghuser=+secrets/ghuser --secret ghtoken=+secrets/ghtoken --mount=type=cache,target=/root/.m2/repository GITHUB_ACTOR=$ghuser GITHUB_TOKEN=$ghtoken mvn clean deploy

## Python

build-release-python:
  ARG version
  RUN apt-get install -y python3 python3-pip pandoc
  RUN pip3 install grpcio grpcio-tools twine pypandoc
  RUN mkdir -p /proto/protobuf
  COPY protobuf/ /api/protobuf
  COPY python/ /api/python
  RUN cd /api/python; python3 -m src.gen.api_generator --base_path ./src/gen/base.py --build_path ./dist --generated_module_name bx --protobuf_path ../protobuf --package_name foo
  RUN echo "Version: $version"; echo $version>/api/python/dist/version
  SAVE ARTIFACT /api/python/dist AS LOCAL ./python/dist
  SAVE ARTIFACT /api/python

publish-release-python:
  FROM +build-release-python
  RUN --secret pypitoken=+secrets/pypitoken cd /api/python/dist;python3 setup.py sdist; twine upload -u=__token__ -p=$pypitoken dist/*

  FROM earthly/dind:alpine
  WORKDIR /test
  COPY docker-compose.yml ./

    WITH DOCKER --load image-name:latest=(+some-target --SOME_BUILD_ARG=value) \
         --pull some-image:latest

  WITH DOCKER --compose docker-compose.yml  \
          --load image-name:latest=(+some-target --SOME_BUILD_ARG=value) \
          --load another-image-name:latest=+another-target \
          --pull some-image:latest
      RUN docker run ... && \
          docker run ... && \
          ...
  END